pipeline {
    agent any
    environment {
        MINIKUBE_HOST = "192.168.1.201"  // Minikube VM IP address
        SSH_CREDENTIALS_ID = "Ansible_Target_Machine_M1"  // Replace with your SSH credentials ID
        MINIKUBE_HOST2 = "192.168.1.202"  // Minikube VM IP address
        SSH_CREDENTIALS_ID2 = "Ansible_Target_Machine_M2"  // Replace with your SSH credentials ID
        
    }
    stages {
        stage('Test SSH Access VM 1') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh "ssh -o StrictHostKeyChecking=no vagrant@${MINIKUBE_HOST} 'hostname'"
                    }
                }
            }
        }
        stage('Deployment on Minikube VM 1') {
            steps {
                script {
                    dir('K8s/') {
                        sshagent([SSH_CREDENTIALS_ID]) {
                            sh """
                                ssh -o StrictHostKeyChecking=no vagrant@${MINIKUBE_HOST} '
                                    echo "Running script on Minikube VM"; 
                                    echo "Current Users:"; 
                                    whoami

                                    echo "Applying namespace.yaml...";
                                    kubectl apply -f Namespace.yaml

                                    echo "Applying pv.yaml...";
                                    kubectl apply -f PV.yaml

                                    echo "Applying pvc.yaml...";
                                    kubectl apply -f PVC.yaml

                                    echo "Applying job.yaml...";
                                    kubectl apply -f Job.yaml

                                    echo "Applying Database.yaml...";
                                    kubectl apply -f Database.yaml

                                    echo "Waiting for resources to be created...";
                                    sleep 60

                                    echo "Applying Secrets and Application.yaml...";
                                    kubectl apply -f Secrets.yaml
                                    kubectl apply -f Application.yaml

                                    echo "Waiting for resources to be created...";
                                    sleep 30
                                '
                            """
                        }   
                    }
                }
            }
        }
        stage('Test SSH Access Machine 2') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID2]) {
                        sh "ssh -o StrictHostKeyChecking=no vagrant@${MINIKUBE_HOST2} 'hostname'"
                    }
                }
            }
        }
        stage('Deployment on Docker VM 2') {
            steps {
                script {
                    dir('Docker/Docker_compose') {
                        sshagent([SSH_CREDENTIALS_ID2]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no vagrant@${MINIKUBE_HOST2} '
                                echo "Running script on Docker VM"; 
                                echo "Current Users:"; 
                                whoami

                                echo "Applying namespace.yaml...";
                                docker-compose up --build -d

                                echo "Waiting for resources to be created...";
                                sleep 60

                                echo "Deployment on Docker VM 2 done";
                            '
                        """
                    }
                        
                    }
                }
            }
        }
        stage('Deployment on AWS') {
            steps {
                script {
                    dir('K8s'){
                        checkdeployEksClusterOrange('aws-jenkins-credentials', 'Macarious-eks-cluster','us-east-2')
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
       success {
            notifyGmail(to: 'm.labibebidallah@nu.edu.eg',isSuccess: true)   
        }
        failure {
            notifyGmail(to: 'm.labibebidallah@nu.edu.eg',isSuccess: false)
    }
    }
}



