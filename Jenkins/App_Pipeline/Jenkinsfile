@Library('Jenkins-Shared-Library') _
pipeline {
    agent any

    stages {
        stage('Checkout SCM stage') {
            steps {
                // Checkout SCM stage
                script {
                    checkout scm   
                }
            }
        }

        stage('Dependencies check') {
            steps {
                // Install the required dependencies
                script {
                    dir('APP') {
                        installDjangoDependencies()
                        echo "Django Dependencies are already installed"
                    }
                }
            }
        }

        stage('Linter Stage') {
            steps {
                // Run Flake8, save the output to a report, and check for fatal errors (e.g., syntax errors)
                script {
                    dir('APP'){
                        runFlake8Linting()   
                        echo "Flake8 Linting is disabled for now"
                    }                 
                }
            }
        }

        stage('SAST Stage') {
            steps {
                // Run Bandit as SAST Stage to check vulnerabilities Staticly
                script {
                    dir('APP'){
                    sastBanditCheck_V2()
                    echo "Bandit Check is disabled for now"
                    }
                }
            }
        }  

        stage('UnitTesting') {
            steps {
                // App Feature Testing: Unit Testing For Django APP
                script {
                    dir('APP') {
                        unitTestDjango_V2()
                        echo "Unit Testing is disabled for now"
                    }   
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    // Build the Docker image
                    dir('APP/') {
                        echo "Building the Docker image..."
                        // buildDockerImage("${params.APP_IMAGE}")
                    }       
                }
            }
        }

        stage('Scan Image') {
            steps {
                script {
                    // Test the Docker image with Snyk or Trivy
                    dir('APP/') {
                        echo "Scanning the Docker image for vulnerabilities..."
                        // trivyScanningReport(imageName:"${params.APP_IMAGE}")
                        // snykLogin('Snyk_Token_ID')
                        // snykTestDockerImage(imageName:'macarious25siv/books:latest')
                    }
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    // Login to Docker Hub using stored credentials, Then Push Image
                    echo "Pushing the Docker image to Docker Hub..."
                    // dockerHubLogin('Docker_Creds')
                    // pushDockerImage("${params.APP_IMAGE}")
                }
            }
        }
        stage('ArgoCD Sync'){
            steps{
                script{
                    echo "Syncing ArgoCD"
                    // argoCD_Sync()
                      
                }
            }
        }

    }
    
    post {
        always {
            // Clean up the workspace and logout from Docker Hub
            echo "Cleaning up the workspace and logging out from Docker Hub..."
            sh 'docker logout'
            cleanWs()
        }
       success {
            notifyGmail(to: 'm.labibebidallah@nu.edu.eg',isSuccess: true)   
        }
        failure {
            notifyGmail(to: 'm.labibebidallah@nu.edu.eg',isSuccess: false)
    }
    }
}