@Library('Jenkins-Shared-Library') _
pipeline {
    agent any

    environment {
        MINIKUBE_HOST = "192.168.1.201"
        ANSIBLE_VERSION = 'Default_Ansible'   // Ansible installation name
    }

    parameters {
        string(name: 'APP_IMAGE', defaultValue: 'macarious25siv/orange:app', description: 'App Docker Image Name')
        string(name: 'PLAYBOOK_PULL_RUN_DockerImages', defaultValue: 'Playbooks/Pull&Run_dockerImage_Playbook.yml', description: 'Pull and Run Docker Images Playbook')
        string(name: 'INVENTORY_FILE1', defaultValue: 'Inventory/inventory.ini', description: 'Path to the first inventory file')
        string(name: 'INVENTORY_FILE2', defaultValue: 'Inventory/inventory_2.ini', description: 'Path to the second inventory file')
        credentials(name: 'CREDENTIALS_ID_1', description: 'Credentials ID for Machine 1', defaultValue: 'Ansible_Target_Machine_M1')
        credentials(name: 'CREDENTIALS_ID_2', description: 'Credentials ID for Machine 2', defaultValue: 'Ansible_Target_Machine_M2')
    }

    stages {
        stage('Checkout SCM stage') {
            steps {
                // Checkout SCM stage
                script {
                    checkout scm   
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                // Install the required dependencies
                script {
                    dir('APP') {
                        // installDjangoDependencies()
                        echo "Django Dependencies are already installed"
                    }
                }
            }
        }

        stage('Linter Stage') {
            steps {
                // Run Flake8, save the output to a report, and check for fatal errors (e.g., syntax errors)
                script {
                    dir('APP'){
                        // runFlake8Linting()   
                        echo "Flake8 Linting is disabled for now"
                    }                 
                }
            }
        }

        stage('SAST Stage') {
            steps {
                // Run Bandit as SAST Stage to check vulnerabilities Staticly
                script {
                    dir('APP'){
                    // sastBanditCheck()
                    echo "Bandit Check is disabled for now"
                    }
                }
            }
        }  

        stage('UnitTesting') {
            steps {
                // App Feature Testing: Unit Testing For Django APP
                script {
                    dir('APP') {
                        // unitTestDjango_V2()
                        echo "Unit Testing is disabled for now"
                    }   
                }
            }
        }


        stage('Build Image') {
            steps {
                script {
                    // Build the Docker image
                    dir('APP/') {
                        echo "Building the Docker image..."
                        // buildDockerImage("${params.APP_IMAGE}")
                    }       
                }
            }
        }

        stage('Scan Image') {
            steps {
                script {
                    // Test the Docker image with Snyk or Trivy
                    dir('APP/') {
                        echo "Scanning the Docker image for vulnerabilities..."
                        // trivyScanningReport(imageName:"${params.APP_IMAGE}")
                        // snykLogin('Snyk_Token_ID')
                        // snykTestDockerImage(imageName:'macarious25siv/books:latest')
                    }
                }
            }
        }

        stage('DAST') {
            steps {
                script {
                    echo "This is Dast stage"
                    // dastDjango()

                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    // Login to Docker Hub using stored credentials, Then Push Image
                    echo "Pushing the Docker image to Docker Hub..."
                    // dockerHubLogin('Docker_Creds')
                    // pushDockerImage("${params.APP_IMAGE}")
                }
            }
        }


        // stage('Deploy DockerContainers by Ansible to Machine 1') {
        //     steps {
        //         script {
        //             dir('Ansible') {
        //                 echo "Deploying on Machine 1"
        //                 ansiblePlaybook(
        //                     credentialsId: "${params.CREDENTIALS_ID_1}",
        //                     installation: "${env.ANSIBLE_VERSION}",
        //                     inventory: "${params.INVENTORY_FILE1}",
        //                     playbook: "${params.PLAYBOOK_PULL_RUN_DockerImages}"
        //                 )
        //                 echo "Docker Deployment done on Machine 2"
                        
        //             }
        //         }
        //     }
        // }

        // stage('Deploy K8s on Minikube to Machine 2') {
        //     steps {
        //         script {
        //             // Use the sshagent plugin to access the SSH key securely
        //                 echo "Deploying on Machine 2"
        //             sshagent([params.CREDENTIALS_ID_2]) {
        //                 // Running multiple commands with semicolons
        //                 sh """
        //                     ssh -o StrictHostKeyChecking=no vagrant@${MINIKUBE_HOST} '
        //                         kubectl get svc
        //                         echo "Applying namespace.yaml..."
        //                         kubectl apply -f namespace.yaml

        //                         echo "Applying pv.yaml..."
        //                         kubectl apply -f pv.yaml

        //                         echo "Applying pvc.yaml..."
        //                         kubectl apply -f pvc.yaml

        //                         echo "Applying job.yaml..."
        //                         kubectl apply -f job.yaml

        //                         echo "Applying service.yaml..."
        //                         kubectl apply -f service.yaml

        //                         echo "Applying ingress.yaml..."
        //                         kubectl apply -f ingress.yaml

        //                         echo "Applying deployment.yaml..."
        //                         kubectl apply -f deployment.yaml
                                
        //                         kubectl get svc -n macarious
        //                     '
        //                 """
        //             }
        //             echo "Minikube Deployment done on Machine 2"
        //         }
        //     }
        // }

    }
    
    post {
        always {
            // Clean up the workspace and logout from Docker Hub
            echo "Cleaning up the workspace and logging out from Docker Hub..."
            sh 'docker logout'
            cleanWs()
        }
       success {
            notifyGmail(to: 'm.labibebidallah@nu.edu.eg',: true)   
        }
        failure {
            notifyGmail(to: 'm.labibebidallah@nu.edu.eg',isSuccess: false)
    }
}